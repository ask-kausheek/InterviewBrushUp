Create this adjacentList 
int n = 5; // Number of nodes

    0
   / \
  1   2
 / \
3   4

vector<vector<int>> adjList(n);
// Example graph edges
adjList[0] = {1, 2};
adjList[1] = {0, 3, 4};
adjList[2] = {0};
adjList[3] = {1};
adjList[4] = {1};


void bfs(int start, const vector<vector<int>>& adjList) {
    vector<bool> visited(adjList.size(), false);
    queue<int> q;
    
    visited[start] = true;
    q.push(start);
    
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";
        
        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
    //  BFS: 0 1 2 3 4
}

void dfs(int node, const vector<vector<int>>& adjList, vector<bool>& visited) {
    visited[node] = true;
    cout << node << " ";
    
    for (int neighbor : adjList[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adjList, visited);
        }
    }
    // DFS: 0 1 3 4 2
}

int main() {
    int n = 5; // Number of nodes
    vector<vector<int>> adjList(n);
    
    // Example graph edges
    adjList[0] = {1, 2};
    adjList[1] = {0, 3, 4};
    adjList[2] = {0};
    adjList[3] = {1};
    adjList[4] = {1};
    
    vector<bool> visited(n, false);
    
    cout << "DFS starting from node 0: ";
    dfs(0, adjList, visited);
    cout << endl;

    return 0;
}
