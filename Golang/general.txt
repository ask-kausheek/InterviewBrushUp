No classes. lexer doesnt work(;),

// Helper function to create a 2D slice filled with a default value
func create2DSlice(rows, cols, defaultValue int) [][]int {
	array := make([][]int, rows)
	for i := range array {
		array[i] = make([]int, cols)
		for j := range array[i] {
			array[i][j] = defaultValue
		}
	}
	return array
}

------------------------------------------------------------------
// Just Initialize a 2D slice
    matrix := make([][]int, r)
    for i := range matrix {
        matrix[i] = make([]int, c)
    }

-----------------------------------------------------------------
INT_MIN in cpp = math.MinInt32 

-------------------------------------
In Go, the range keyword is used to iterate over elements of various data structures such as slices, arrays, maps, strings

for i, num := range nums

and for channels
for val := range ch

------------------------------------------
for i := 0; i < 10; i++ {
     if m[i] == 5 {
        continue // Skip the rest of the loop when i is 5
    }
    if m[i] == 8 {
        break // Exit the loop when i is 8
    }
}

In go, we cannot write the condition in for loop  like 
  for i := 0; i < 10 && m!= -1  (X)
like in CPP.

-------------------------------------------
In go, No while loop so we write While-like-loop

i := 0
for i < 10 {
    fmt.Println(i)
    i++
}

Infinity-loop

for {
    fmt.Println("This will run forever")
}

---------------------------------------
Creating a set is Go, make(map[string]struct{})
Inserting map["apple"] = struct{}{}
Delete element, delete(map,"apple")

----------------------------------------------------------
Initial slice -> s := []int{1, 2, 3, 4, 5}
Remove element in slice at ith index
s = append(s[:i],s[i+1:]...)

-----------------------------
No min,max you hv to write yourself
func min(x, y int) int {
    if x < y {
        return x
    }
    return y
}