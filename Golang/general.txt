No classes. lexer doesnt work(;),
go build: Compiles Go source code into an executable binary. go build -o myoutput myprogram.go
        But, go build ./... 
        compiles all packages in the current module (and their dependencies) but does not produce an executable. 
        This is commonly used in larger projects.
go run: Compiles and runs Go source code in one step. go run file1.go file2.go
go install: Compiles and installs the Go binary into the Go bin directory. go install ./myprogram
Cross-Compilation: Set GOOS and GOARCH to build for different platforms.
    GOOS=linux GOARCH=amd64 go build -o myprogram myprogram.go

------------------------------------------------------
// Helper function to create a 2D slice filled with a default value
func create2DSlice(rows, cols, defaultValue int) [][]int {
	array := make([][]int, rows)
	for i := range array {
		array[i] = make([]int, cols)
		for j := range array[i] {
			array[i][j] = defaultValue
		}
	}
	return array
}

------------------------------------------------------------------
// Just Initialize a 2D slice
    matrix := make([][]int, r)
    for i := range matrix {
        matrix[i] = make([]int, c)
    }

-----------------------------------------------------------------
INT_MIN in cpp = math.MinInt32 

-------------------------------------
In Go, the range keyword is used to iterate over elements of various data structures such as slices, arrays, maps, strings

for i, num := range nums

and for channels
for val := range ch

------------------------------------------
for i := 0; i < 10; i++ {
     if m[i] == 5 {
        continue // Skip the rest of the loop when i is 5
    }
    if m[i] == 8 {
        break // Exit the loop when i is 8
    }
}

In go, we cannot write the condition in for loop  like 
  for i := 0; i < 10 && m!= -1  (X)
like in CPP.

-------------------------------------------
In go, No while loop so we write While-like-loop

i := 0
for i < 10 { // In this format u can write conditions like i < 10 && arr[i+1] == arr[i]+1
    fmt.Println(i)
    i++
}

Infinity-loop

for {
    fmt.Println("This will run forever")
}

---------------------------------------
Creating a set is Go, make(map[string]struct{})
Inserting map["apple"] = struct{}{}
Delete element, delete(map,"apple")

----------------------------------------------------------
Initial slice -> s := []int{1, 2, 3, 4, 5}
Remove element in slice at ith index
s = append(s[:i],s[i+1:]...)

-----------------------------
No min,max you hv to write yourself
func min(x, y int) int {
    if x < y {
        return x
    }
    return y
}

----------------------------------------
A slice is a reference, so changing value in slice also changes in array if slice is created from array.
Arrays: var arr [3]int = [3]int{1, 2, 3}
Slices: var s []int or s := make([]int, 5) |  s := []int{1, 2, 3} | 

Arrays have a fixed, continuous block of memory.
Slices have a header with a pointer to an underlying array, and their size can change, requiring potential reallocation.

In C, accessing arr[5] might cause a segmentation fault if the memory is not accessible, or it might print some garbage value if it accidentally accesses some other memory location. 
Go avoids this by performing bounds checking and panicking safely when an out-of-bounds access is attempted for memory safety.

----------------------------------------------------------------------------
len(slice), slice := arr[:]  // Slice of the entire array, 

slice := arr[1:4]  // Slice from index 1 to 3 (inclusive of 1, exclusive of 4) 

Split: strings.Split(str, "delimiter")
Replace: strings.Replace(str, "old", "new", -1)
contains := strings.Contains(str, substr)
index := strings.Index(str, substr)

sort.Ints(slice) , sort.Strings(slice)

// Sort custom types
sort.Slice(slice, func(i, j int) bool {
    return slice[i] < slice[j]
})
fmt.Scan(&x)
ch <- value  // Send value
value := <-ch // Receive value


---------------------------------------
import "container/heap"
